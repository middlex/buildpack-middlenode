#!/usr/bin/env bash

echo "Compile middlenode app"

set -e            # fail fast
set -o pipefail   # don t ignore exit codes when piping output

build_dir=$1
cache_dir=$2
env_dir=$3

buildpacks=(ruby nodejs)

ruby_buildpack_version=126
nodejs_buildpack_version=60

ruby_app_folder=client
nodejs_app_folder=server

mkdir -p $cache_dir
mkdir -p $build_dir/.profile.d

for buildpack_name in ${buildpacks[*]}
do
  # Get buildpack version, eg: 126
  buildpack_version_variable=$buildpack_name"_buildpack_version"
  buildpack_version="${!buildpack_version_variable}"

  # Get app folder, eg: /build_dir/server
  app_folder_variable=$buildpack_name"_app_folder"
  app_l=${!app_folder_variable}
  app_folder=$build_dir/$app_l

  # Download and copy buildpack to the cache_dir,
  # eg: download and copy nodejs buildpack to /cache_dir/heroku-buildpack-nodejs-160
  buildpack_url="https://github.com/heroku/heroku-buildpack-$buildpack_name/archive/v$buildpack_version.tar.gz"
  buildpack_folder=$cache_dir/"heroku-buildpack-$buildpack_name-$buildpack_version"
  cd $cache_dir;
  if [ ! -d $buildpack_folder ]; then
    echo "Installing $buildpack_name buildpack"
    curl $buildpack_url -s -L -o - | tar xz
  else
    echo "$buildpack_name buildpack already installed"
  fi

  # create a cachedir for the buildpack
  buildpack_cache_dir=$cache_dir/$buildpack_name
  mkdir -p $buildpack_cache_dir

  # COMPILE
  $buildpack_folder/bin/compile $app_folder $buildpack_cache_dir $env_dir

  # Copy profile files of the generated by the buildpack to the build_dir
  for profile in $app_folder/.profile.d/*; do
    regex="s/\$HOME/\$HOME\/$app_l/g"
    sed -i.bak $regex $profile
  done
  cp $app_folder/.profile.d/* $build_dir/.profile.d
  rm -r $app_folder/.profile.d
done

# Rename profile files so ruby will be sourced first,
# this will puth nodejs' node binary first in the $PATH.
# Otherwise, the node binary downloaded by the ruby buildpack would be first.
mv $build_dir/.profile.d/ruby.sh $build_dir/.profile.d/0_ruby.sh
mv $build_dir/.profile.d/nodejs.sh $build_dir/.profile.d/1_nodejs.sh

# Source buildpacks profiles
old_home=$HOME
export HOME=$build_dir
for profile in $build_dir/.profile.d/*; do
  source ${profile}
done

if [ -d "$3" ]; then
  for e in $(ls $3); do
    export "$e=$(cat $3/$e)"
    :
  done
fi
export HOME=$old_home

# Build middleman app
cd $build_dir/client
rm -rf build
mkdir -p $cache_dir/middleman_build
ln -s $cache_dir/middleman_build build
bundle exec middleman build --verbose
bundle exec middleman sync

# Copy static files so they will be served by node
cp -r build/* $build_dir/server/public
